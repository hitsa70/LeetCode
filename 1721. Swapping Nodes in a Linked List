/* 1721. Swapping Nodes in a Linked List
Runtime: 2 ms, faster than 99.89% of Java online submissions for Swapping Nodes in a Linked List.
Memory Usage: 64.9 MB, less than 72.01% of Java online submissions for Swapping Nodes in a Linked List.
*/



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapNodes(ListNode head, int k) {
         ListNode fast = head;
        ListNode slow = head;
        ListNode first = head, second = head;
        
		// Put fast (k-1) nodes after slow
        for(int i = 0; i < k - 1; ++i)
            fast = fast.next;
            
		// Save the node for swapping
        first = fast;

		// Move until the end of the list
        while(fast.next != null) {
			slow = slow.next;
            fast = fast.next;
        }
        
        // Save the second node for swapping
		// Note that the pointer second isn't necessary: we could use slow for swapping as well
		// However, having second improves readability
        second = slow;
		
		// Swap values
        int temp = first.val;
        first.val = second.val;
        second.val = temp;
        
        return head;
       
    }
}







//  ListNode front=head , rear=head;
        
//         int  len=0;
//         while(front!=null)
//         {
//             len+=1;
//             front=front.next;
//         }
        
//         front=head;
//         int count=1;
//         while(count<k)
//         {
//             front=front.next;
//             count++;
//         }
        
//         count=1;
//         while(count<(len-k+1 ) )
//         {
//             rear=rear.next;
//             count++;
//         }
        
//         int temp=front.val;
//         front.val=rear.val;
//         rear.val=temp;
        
        
        
//         return head;
