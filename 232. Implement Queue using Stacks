/*
232. Implement Queue using Stacks
Runtime: 0 ms, faster than 100.00% of Java online submissions for Implement Queue using Stacks.
Memory Usage: 37.1 MB, less than 25.94% of Java online submissions for Implement Queue using Stacks.*/


class MyQueue {

    Stack<Integer> in=new Stack();
    Stack<Integer> out=new Stack();
    /** Initialize your data structure here. */
    
    public MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        in.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        peek();
        return out.pop();
        
    }
    
    /** Get the front element. */
    public int peek() {
        if(out.empty())
            while(!in.empty())
                out.push(in.pop());
        
        return out.peek();
        
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
       
        return in.empty() && out.empty();
        
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
