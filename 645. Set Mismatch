/*Runtime: 2 ms, faster than 86.18% of Java online submissions for Set Mismatch.
Memory Usage: 40 MB, less than 96.41% of Java online submissions for Set Mismatch.*/

class Solution {
    public int[] findErrorNums(int[] nums) {
        
        int res[]=new int[2];
        
        
        int count[]=new int[10001];
        for(int i=0;i<nums.length;i++)
            ++count[nums[i]];
        
        
        for(int i=0;i<count.length;i++)
          if(count[i]>1)
             res[0]=i;
                
            
       
        int i=1;
        while(count[i]!=0 ){
            res[1]=i;
            i++;
        }
            
        res[1]++;
        return res;
          
    }
}



/*Runtime: 11 ms, faster than 34.11% of Java online submissions for Set Mismatch.
Memory Usage: 40.4 MB, less than 80.99% of Java online submissions for Set Mismatch.*/

class Solution {
    public int[] findErrorNums(int[] nums) {
        
        int[] arr=new int[2];
        HashSet<Integer> set= new HashSet<>();
       
        for(int i:nums){
            if(set.contains(i))
                arr[0]=i;

            set.add(i);       
        }
       
        for(int i=0;i<set.size();++i)
        {
            if(!set.contains(i+1))
            {
                arr[1]=i+1;
                break;
            }
        }
        
        if(arr[1]==0)
            arr[1]=nums.length;
        
      
        return arr;
          
    }
}
