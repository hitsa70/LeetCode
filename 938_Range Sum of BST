/*938. Range Sum of BST
Runtime: 1 ms, faster than 54.68% of Java online submissions for Range Sum of BST.
Memory Usage: 47.6 MB, less than 46.72% of Java online submissions for Range Sum of BST.


class Solution {
    int sum=0;    
    public int rangeSumBST(TreeNode root, int L, int R) {
        if(root==null)
            return 0;
        if(root.val>=L && root.val<=R)
            sum+=root.val;
    
        rangeSumBST(root.left,L,R);
        rangeSumBST(root.right,L,R);
        
    return sum;
        }
}


*/

/*Runtime: 0 ms, faster than 100.00% of Java online submissions for Range Sum of BST.
Memory Usage: 47.2 MB, less than 76.52% of Java online submissions for Range Sum of BST.*/

class Solution {
 public int rangeSumBST(TreeNode root, int L, int R) {
        if (root == null) 
            return 0; // base case.
        if (root.val < L)
            return rangeSumBST(root.right, L, R); // left branch excluded.
        if (root.val > R)
            return rangeSumBST(root.left, L, R); // right branch excluded.
        return root.val + rangeSumBST(root.right, L, R) + rangeSumBST(root.left, L, R); // count in both children.
    }
}
